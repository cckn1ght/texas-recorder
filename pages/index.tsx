import type {NextPage} from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {
  AlertDialog,
  AlertDialogBody,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogOverlay,
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  NumberDecrementStepper,
  NumberIncrementStepper,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  SkeletonText,
  Stack,
  Stat,
  StatNumber,
  Table,
  TableCaption,
  TableContainer,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useBoolean,
  useDisclosure,
} from '@chakra-ui/react'
import React, {useEffect, useMemo, useState} from 'react';
import _ from 'lodash';
import useSWR from "swr";
import {ChipData, ChipsData} from "./api/chips-data";
import axios from 'axios'
import {ChipDataRes} from "./api/chip-data/[index]";

const ChipsDataStorageKey = 'chips_data';

const fetcher = (url: string) => axios.get(url).then(res => res.data)

const ChipsDataAPI = "/api/chips-data";
const UpdateChipDataAPI = "/api/chip-data";
const saveChipsDataToAPi = (data: ChipData[]): Promise<ChipsData> => {
  return axios.post<ChipsData>(ChipsDataAPI, {data}).then(res => res.data);
}

const saveOneChipDataToAPi = (chipData: ChipData, index: number): Promise<ChipDataRes> => {
  return axios.put<ChipDataRes>(`${UpdateChipDataAPI}/${index.toString()}`, chipData).then(res => res.data);
}

const Home: NextPage = () => {
  const [inited, setInited] = useBoolean(false);
  const [people, setPeople] = useState(6);
  const [chips, setChips] = useState(2000);
  const [ok, setOk] = useBoolean(false)
  const [chipsData, setChipsData] = useState<ChipData[]>([]);
  const {isOpen, onOpen, onClose} = useDisclosure()
  const cancelRef: any = React.useRef()
  const { data: remoteChipsData } = useSWR<ChipsData>(ChipsDataAPI, fetcher)

  useEffect(() => {
    if (remoteChipsData && remoteChipsData.data.length > 0) {
      const {data} = remoteChipsData;
      setPeople(data.length);
      setChipsData(data);
      if (!ok) {
        setOk.on();
      }
    }
    if (!inited) {
      setInited.on();
    }
    return () => {
      debouncedSaveChipData.cancel();
    }
  }, [remoteChipsData])
  // useEffect(() => {
  //   debouncedSaveChipData(chipsData);
  // }, [chipsData])
  const onOk = () => {
    const newChips = Array.from({length: people}).map(v => ({name: '', borrowed: chips}));
    setChipsData(newChips);
    saveChipsDataToAPi(newChips)
    setOk.on();
  }

  const onReset = () => {
    setOk.off();
    setChipsData([]);
    // localStorage.removeItem(ChipsDataStorageKey);
    saveChipsDataToAPi([]);
    onClose();
  }
  const onAddPerson = () => {
    setPeople(prev => prev + 1);
    setChipsData(prev => {
      const newChips = [...prev, {name: '', borrowed: chips}];
      saveChipsDataToAPi(newChips);
      return newChips;
    })
  }

  const updateChipData = (data: ChipData, index: number) => {
    const theData = {...data};
    if (theData.left !== undefined) {
      theData.total = theData.left - theData.borrowed;
    } else {
      theData.left = undefined;
      theData.total = undefined;
    }
    setChipsData(prev => {
      const newChipsData = [...prev];
      newChipsData[index] = theData;
      return newChipsData;
    })

    debouncedSaveChipData(theData, index)
  }

  const debouncedSaveChipData = useMemo(
    () => _.debounce(saveOneChipDataToAPi, 1000)
    , []);

  const renderTotal = (total?: number) => {
    if (total !== undefined) {
      let color = 'black';
      if (total < 0) {
        color = 'tomato';
      } else if (total > 0) {
        color = 'teal';
      }
      return (
        <Stat>
          <StatNumber color={color}>{total}</StatNumber>
        </Stat>
      );
    }
    return <Text>-</Text>;
  }
  return (
    <Box className={styles.container}>
      <Head>
        <title>Texas Hodl&apos;em Recorder</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      {
        !inited ?
          <Box>
            <Stack>
              <SkeletonText mt='4' noOfLines={4} spacing='4' />
            </Stack>
          </Box>
          :
          <Box>
            <FormControl>
              <FormLabel>How many people in the game?</FormLabel>
              <NumberInput min={2} onChange={(valueAsString: string, value: number) => setPeople(value)} value={people}>
                <NumberInputField/>
                <NumberInputStepper>
                  <NumberIncrementStepper/>
                  <NumberDecrementStepper/>
                </NumberInputStepper>
              </NumberInput>
              <FormLabel>Init chips for everyone?</FormLabel>
              <NumberInput min={1000} onChange={(valueAsString: string, value: number) => setChips(value)} value={chips}
                           step={1000}>
                <NumberInputField/>
                <NumberInputStepper>
                  <NumberIncrementStepper/>
                  <NumberDecrementStepper/>
                </NumberInputStepper>
              </NumberInput>
            </FormControl>
            {
              ok ?
                <Button colorScheme='red' size='lg' mt={'2rem'} width={"100%"} onClick={onOpen}>RESET</Button>
                :
                <Button colorScheme='teal' size='lg' mt={'2rem'} width={"100%"} onClick={onOk}>OK</Button>
            }
            <AlertDialog
              isOpen={isOpen}
              leastDestructiveRef={cancelRef}
              onClose={onClose}
            >
              <AlertDialogOverlay>
                <AlertDialogContent>
                  <AlertDialogHeader fontSize='lg' fontWeight='bold'>
                    Reset Game
                  </AlertDialogHeader>

                  <AlertDialogBody>
                    Do you want to RESET the game?
                  </AlertDialogBody>

                  <AlertDialogFooter>
                    <Button ref={cancelRef} onClick={onClose}>
                      Cancel
                    </Button>
                    <Button colorScheme='red' onClick={onReset} ml={3}>
                      Reset
                    </Button>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialogOverlay>
            </AlertDialog>
            {
              ok &&
              <Box>
                <TableContainer mt={'2rem'}>
                  <Table variant='simple'>
                    <TableCaption>Texas Hodl&apos;em Recorder</TableCaption>
                    <Thead>
                      <Tr>
                        <Th>Name</Th>
                        <Th>Borrowed Chips</Th>
                        <Th>Left Chips</Th>
                        <Th>Win/Loss</Th>
                      </Tr>
                    </Thead>
                    <Tbody>
                      {chipsData.map((chipData, i) => (
                        <Tr key={i}>
                          <Td>
                            <Input value={chipData.name}
                                   onChange={e => updateChipData({...chipData, name: e.target.value}, i)}/>
                          </Td>
                          <Td>
                            <NumberInput step={1000} value={chipData.borrowed}
                                         onChange={(sv, value) => updateChipData({...chipData, borrowed: value}, i)}>
                              <NumberInputField/>
                              <NumberInputStepper>
                                <NumberIncrementStepper/>
                                <NumberDecrementStepper/>
                              </NumberInputStepper>
                            </NumberInput>
                          </Td>
                          <Td>
                            <NumberInput min={0} defaultValue={0}
                                         value={chipData.left}
                                         onChange={(sv, value) => updateChipData({
                                           ...chipData,
                                           left: isNaN(value) ? undefined : value
                                         }, i)}>
                              <NumberInputField/>
                            </NumberInput>
                          </Td>
                          <Td>
                            {renderTotal(chipData.total)}
                          </Td>
                        </Tr>
                      ))}
                    </Tbody>
                  </Table>
                </TableContainer>
                <Button colorScheme={'cyan'} size='lg' mt={'2rem'} width={"100%"} onClick={onAddPerson}>Add One More Person</Button>
              </Box>
            }
          </Box>
      }
    </Box>
  )
}

export default Home
